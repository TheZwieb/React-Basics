{"version":3,"sources":["Coders.js","AddCoder.js","App.js","serviceWorker.js","index.js"],"names":["coders","deleteCoder","className","map","key","id","name","age","SkillLevel","onClick","AddCoder","state","skillLevel","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addCoder","onSubmit","this","htmlFor","type","onChange","Component","App","coder","Math","random","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAuBeA,G,MApBA,YAA4B,IAA1BA,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,YACvB,OACE,yBAAKC,UAAU,aAEXF,EAAOG,KAAI,SAAAH,GACT,OACE,yBAAKE,UAAU,SAASE,IAAKJ,EAAOK,IAClC,sCAAaL,EAAOM,MACpB,qCAAYN,EAAOO,KACnB,6CAAoBP,EAAOQ,YAC3B,4BAAQC,QAAS,WAAOR,EAAYD,EAAOK,MAA3C,gBACA,oC,OCoBCK,E,2MA/BbC,MAAQ,CACNL,KAAM,KACNC,IAAK,KACLK,WAAY,M,EAEdC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOX,GAAKS,EAAEE,OAAOC,S,EAG5BC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKV,Q,wEAGzB,OACE,6BACE,0BAAMW,SAAUC,KAAKL,cACnB,2BAAOM,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOpB,GAAG,OAAOqB,SAAUH,KAAKV,eAC5C,2BAAOW,QAAQ,OAAf,QACA,2BAAOC,KAAK,OAAOpB,GAAG,MAAMqB,SAAUH,KAAKV,eAC3C,2BAAOW,QAAQ,eAAf,gBACA,2BAAOC,KAAK,OAAMpB,GAAG,aAAaqB,SAAUH,KAAKV,eACjD,gD,GAzBac,aCoCRC,E,2MAjCbjB,MAAQ,CACNX,OAAQ,CACN,CAAEM,KAAM,SAAUC,IAAK,GAAIC,WAAY,OAAQH,GAAI,GACnD,CAAEC,KAAM,oBAAqBC,IAAK,GAAIC,WAAY,kBAAmBH,GAAI,GACzE,CAAEC,KAAM,eAAgBC,IAAK,GAAIK,WAAY,eAAgBP,GAAI,K,EAGrEgB,SAAW,SAACQ,GACVA,EAAMxB,GAAKyB,KAAKC,SAChB,IAAI/B,EAAM,sBAAO,EAAKW,MAAMX,QAAlB,CAA0B6B,IACpC,EAAKd,SAAS,CACZf,OAAQA,K,EAGZC,YAAc,SAACI,GACb,IAAIL,EAAS,EAAKW,MAAMX,OAAOgC,QAAO,SAAAH,GACpC,OAAOA,EAAMxB,KAAOA,KAEtB,EAAKU,SAAS,CACZf,OAAQA,K,wEAIV,OACE,yBAAKE,UAAU,OACb,2CACA,kBAAC,EAAD,CAAQF,OAAQuB,KAAKZ,MAAMX,OAAQC,YAAasB,KAAKtB,cACrD,kBAAC,EAAD,CAAUoB,SAAUE,KAAKF,gB,GA5BfM,aCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.973663f3.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Coders.css'\r\n\r\nconst coders = ({coders, deleteCoder}) => {\r\n  return (\r\n    <div className=\"coderList\">\r\n      { \r\n        coders.map(coders => {\r\n          return (\r\n            <div className=\"coders\" key={coders.id}>\r\n              <div>Name: { coders.name }</div>\r\n              <div>Age: { coders.age }</div>\r\n              <div>Skill Level: { coders.SkillLevel }</div>\r\n              <button onClick={() => {deleteCoder(coders.id)}}>Delete coder</button>\r\n              <hr />\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default coders","import React, { Component } from 'react'\r\n\r\nclass AddCoder extends Component {\r\n  state = {\r\n    name: null,\r\n    age: null,\r\n    skillLevel: null\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addCoder(this.state);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"name\">Name:</label>\r\n          <input type=\"text\" id=\"name\" onChange={this.handleChange} />\r\n          <label htmlFor=\"age\">Age:</label>\r\n          <input type=\"text\" id=\"age\" onChange={this.handleChange} />\r\n          <label htmlFor=\"skill Level\">Skill Level:</label>\r\n          <input type=\"text\"id=\"skillLevel\" onChange={this.handleChange} />\r\n          <button>Submit</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddCoder","import React, { Component } from 'react';\nimport Coders from './Coders'\nimport AddCoder from './AddCoder'\n\nclass App extends Component {\n  state = {\n    coders: [\n      { name: 'Austin', age: 25, SkillLevel: 'noob', id: 1 },\n      { name: 'Richard Hendricks', age: 20, SkillLevel: 'Absolute madman', id: 2 },\n      { name: 'John Carmack', age: 25, skillLevel: 'Grand Master', id: 3 }\n    ]\n  }\n  addCoder = (coder) => {\n    coder.id = Math.random();\n    let coders = [...this.state.coders, coder];\n    this.setState({\n      coders: coders\n    });\n  }\n  deleteCoder = (id) => {\n    let coders = this.state.coders.filter(coder => {\n      return coder.id !== id\n    });\n    this.setState({\n      coders: coders\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>CODING LIST</h1>\n        <Coders coders={this.state.coders} deleteCoder={this.deleteCoder} />\n        <AddCoder addCoder={this.addCoder} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}