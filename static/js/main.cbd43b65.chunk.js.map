{"version":3,"sources":["Coders.js","AddCoder.js","App.js","serviceWorker.js","index.js"],"names":["Coders","coderList","map","age","className","key","id","name","skillLevel","AddCoder","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","this","htmlFor","type","onChange","Component","App","addCoder","Coder","Math","random","coders","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAyBeA,EAvBA,YAAe,IAAbA,EAAY,EAAZA,OACNC,EAAYD,EAAOE,KAAI,SAAAF,GAC1B,OAAIA,EAAOG,KAAM,KAEZ,yBAAKC,UAAU,SAASC,IAAKL,EAAOM,IAChC,sCAAYN,EAAOO,MACpB,qCAAWP,EAAOG,KAClB,6CAAmBH,EAAOQ,aAItB,QAKhB,OACI,yBAAKJ,UAAU,aACVH,I,OCcEQ,E,2MA/BXC,MAAQ,CACJH,KAAM,KACNJ,IAAK,KACLK,WAAY,M,EAEhBG,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOR,GAAKM,EAAEE,OAAOC,S,EAGhCC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMT,SAAS,EAAKC,Q,wEAGzB,OACI,6BACI,0BAAMS,SAAUC,KAAKJ,cACjB,2BAAOK,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOhB,GAAG,OAAOiB,SAAUH,KAAKT,eAC5C,2BAAOU,QAAQ,OAAf,QACA,2BAAOC,KAAK,OAAOhB,GAAG,MAAMiB,SAAUH,KAAKT,eAC3C,2BAAOU,QAAQ,cAAf,gBACA,2BAAOC,KAAK,OAAOhB,GAAG,aAAaiB,SAAUH,KAAKT,eAClD,gD,GAzBGa,aC6BRC,E,2MA1Bbf,MAAQ,CACNV,OAAS,CACP,CAACO,KAAM,SAAUJ,IAAK,GAAIK,WAAY,OAAQF,GAAG,GACjD,CAACC,KAAM,oBAAqBJ,IAAK,GAAIK,WAAY,kBAAmBF,GAAG,GACvE,CAACC,KAAM,eAAgBJ,IAAK,GAAIK,WAAY,eAAgBF,GAAG,K,EAGnEoB,SAAS,SAACC,GACRA,EAAMrB,GAAKsB,KAAKC,SAChB,IAAIC,EAAM,sBAAO,EAAKpB,MAAMV,QAAlB,CAA0B2B,IACpC,EAAKd,SAAS,CACZb,OAAQ8B,K,wEAIR,OACE,yBAAK1B,UAAU,OACb,4CACA,sCACA,kBAAC,EAAD,CAAQJ,OAAQoB,KAAKV,MAAMV,SAC3B,kBAAC,EAAD,CAAUS,SAAUW,KAAKM,gB,GArBjBF,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cbd43b65.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Coders = ({Coders}) => {\r\n     const coderList = Coders.map(Coders => {\r\n        if (Coders.age >-50000000000){\r\n         return (\r\n             <div className=\"Coders\" key={Coders.id}>\r\n                 <div>Name: {Coders.name}</div>\r\n                <div>Age: {Coders.age}</div>\r\n                <div>Skill Level: {Coders.skillLevel}</div>\r\n             </div>\r\n         )\r\n        }else{\r\n             return null\r\n        }\r\n     })    \r\n\r\n        \r\n    return(\r\n        <div className=\"coderList\">\r\n            {coderList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Coders","import React, { Component } from 'react'\r\n\r\nclass AddCoder extends Component {\r\n    state = {\r\n        name: null,\r\n        age: null,\r\n        skillLevel: null\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.AddCoder(this.state);\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"name\">Name:</label>\r\n                    <input type=\"text\" id=\"name\" onChange={this.handleChange} />\r\n                    <label htmlFor=\"age\">Age:</label>\r\n                    <input type=\"text\" id=\"age\" onChange={this.handleChange} />\r\n                    <label htmlFor=\"skillLevel\">Skill Level:</label>\r\n                    <input type=\"text\" id=\"skillLevel\" onChange={this.handleChange} />\r\n                    <button>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddCoder","import React, { Component } from 'react';\nimport Coders from './Coders';\nimport AddCoder from './AddCoder';\n\nclass App extends Component {\n  state = {\n    Coders : [\n      {name: 'Austin', age: 25, skillLevel: 'n00b', id:1 },\n      {name: 'Richard Hendricks', age: 30, skillLevel: 'Absolute Madman', id:2 },\n      {name: 'John Carmack', age: 49, skillLevel: 'Grand Master', id:3 },\n    ]\n  }\n  addCoder=(Coder) => {\n    Coder.id = Math.random();\n    let coders = [...this.state.Coders, Coder];\n    this.setState({\n      Coders: coders\n    })\n  }\n    render() {\n      return (\n        <div className=\"App\">\n          <h1>React Basics</h1>\n          <p>CODERS:</p>\n          <Coders Coders={this.state.Coders}/>\n          <AddCoder AddCoder={this.addCoder}/>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}